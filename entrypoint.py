#!/usr/bin/env python3
import argparse
import json
import requests
import os


Headers = dict[str, str]
OpenIssues = dict[str, list[dict]]


def close_issue(issue: dict, headers: Headers):
    payload = {'state': 'closed'}
    r = requests.patch(issue['url'], data=json.dumps(payload), headers=headers)
    print('Closed issue {}#{}: status code {}'.format(
        issue['title'], issue['number'], r.status_code,
    ))


def create_new_issues(
        report: dict,
        open_issues: OpenIssues,
        url: str,
        headers: Headers,
) -> set[str]:
    found_issues = set()
    for vulnerability in report['vulnerabilities']:
        title = '{} {}'.format(vulnerability['title'], vulnerability['id'])
        found_issues.add(title)
        if title in open_issues:
            continue
        payload = {'title': title,
                   'body': vulnerability['description'],
                   'labels': ['Snyk']}
        r = requests.post(url, data=json.dumps(payload), headers=headers)
        new_issue = r.json()
        print('Created issue {}#{}: status code {}'.format(
            title, new_issue['number'], r.status_code,
        ))
        open_issues[title] = [new_issue]
    return found_issues


def close_old_issues(
        open_issues: OpenIssues,
        found_issues: set[str],
        headers: Headers,
):
    for title, open_issue_list in open_issues.items():
        if title not in found_issues:
            for open_issue in open_issue_list:
                close_issue(open_issue, headers)


def fetch_open_issues(url: str, headers: Headers) -> OpenIssues:
    open_issues = dict()
    for open_issue in requests.get(url, headers=headers).json():
        title = open_issue['title']
        snyk_label = (label for label in open_issue['labels'] if label['name'] == 'Snyk')
        if next(snyk_label, None) is not None:
            if title not in open_issues:
                open_issues[title] = []
            open_issues[title].append(open_issue)
    return open_issues


def main():
    parser = argparse.ArgumentParser(description="Parse the report file")
    parser.add_argument("report_file", type=str, help="a name of the report file")
    args = parser.parse_args()

    with open(args.report_file) as f:
        report = json.load(f)

    github_repository = os.environ['GITHUB_REPOSITORY']
    url = 'https://api.github.com/repos/{}/issues'.format(github_repository)
    token = os.environ['TOKEN']
    headers = {'Authorization': 'token {}'.format(token),
               'Accept': 'application/vnd.github.v3+json'}

    open_issues = fetch_open_issues(url, headers)
    print('Creating new issues')
    found_issues = create_new_issues(report, open_issues, url, headers)
    print('')
    print('Closing old issues')
    close_old_issues(open_issues, found_issues, headers)


if __name__ == '__main__':
    main()
